What happens when you initialize a repository? Why do you need to do it?

when I initialize a git repository using git init. I get a .git hidden file on my directory (meta data for history). I can view .git files using ls -a. I can then use git status. I need to do this in order to be able to track versions of my files. 

If I use git log and get an error
fatal: bad default revision head.

git init: 
creates a git respository, and creates the .git files. 

git status: 
shows the status of all the files on the repository

How is the staging area different from the working directory and the repository? What value do you think it offers?

staging area is an intermidate stage that allows us to choose what files in the directory we wish to commit. 

git diff id id : 
shows the difference between 2 commits in the respository

git diff: 
shows difference between files in working directory and staging area. staging area is latest commit unless added things to it. 

git diff --staged: 
final step, difference between files in staging area and respository. 

git checkout master: 
used to leave detached head state

How can you use the staging area to make sure you have one commit per logical change?

I can use git diff -- staged 
or before that using git diff 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

when we have different versions of the game, for example creating an easy mode for a game but it is not official yet. italian version of the game. 